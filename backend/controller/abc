// To achieve this, you need to:

// 1. Ensure the chat page receives both the contractor's ID (who is logged in) and the property owner's ID (based on the property ID).
// 2. Implement the backend to handle fetching and sending chat messages.
// 3. Implement the frontend to display the chat interface.

// ### Backend (Node.js with Express and MySQL)

// #### 1. Fetch Property Owner Information

// Ensure you have an endpoint to fetch the property owner's information based on `propertyid`.

// ```javascript
// // GET /api/property/:propertyid/owner
// app.get('/api/property/:propertyid/owner', async (req, res) => {
//     const { propertyid } = req.params;
//     try {
//         const [owner] = await con.promise().query(
//             'SELECT u.userid, u.username FROM users u JOIN property p ON u.userid = p.userid WHERE p.propertyid = ?',
//             [propertyid]
//         );
//         res.json(owner[0]);
//     } catch (error) {
//         console.error('Error fetching property owner:', error);
//         res.status(500).json({ error: 'Internal server error' });
//     }
// });
// ```

// #### 2. Fetch Chat Messages

// Implement an endpoint to fetch chat messages between the contractor and the property owner.

// ```javascript
// // GET /api/chat/:propertyid/messages
// app.get('/api/chat/:propertyid/messages', async (req, res) => {
//     const { propertyid } = req.params;
//     try {
//         const [messages] = await con.promise().query(
//             `SELECT * FROM chat_message WHERE (sender_id IN
//             (SELECT userid FROM users WHERE userid = (SELECT userid FROM property WHERE propertyid = ?))
//             OR receiver_id IN (SELECT userid FROM users WHERE userid = (SELECT userid FROM property WHERE propertyid = ?)))`,
//             [propertyid, propertyid]
//         );
//         res.json(messages);
//     } catch (error) {
//         console.error('Error fetching chat messages:', error);
//         res.status(500).json({ error: 'Internal server error' });
//     }
// });
// ```

// #### 3. Send Chat Messages

// Implement an endpoint to send chat messages.

// ```javascript
// // POST /api/chat/message
// app.post('/api/chat/message', async (req, res) => {
//     const { sender_id, receiver_id, message } = req.body;
//     try {
//         await con.promise().query(
//             'INSERT INTO chat_message (sender_id, receiver_id, message) VALUES (?, ?, ?)',
//             [sender_id, receiver_id, message]
//         );
//         res.status(201).json({ message: 'Message sent successfully' });
//     } catch (error) {
//         console.error('Error sending message:', error);
//         res.status(500).json({ error: 'Internal server error' });
//     }
// });
// ```

// ### Frontend (Vue.js)

// #### 1. Contractor List Component (`ContractorList.vue`)

// Add a chat button that navigates to the chat page with `propertyid` and `ownerid`.

// ```vue
// <template>
//   <div>
//     <h1>Properties</h1>
//     <div v-if="properties.length === 0">No properties available</div>
//     <div v-else>
//       <v-row>
//         <v-col v-for="property in properties" :key="property.propertyid" cols="12" md="4" class="d-flex">
//           <v-card class="mx-auto">
//             <v-card-title>{{ property.property_name }}</v-card-title>
//             <v-card-subtitle>{{ property.property_address }}</v-card-subtitle>
//             <v-card-text>{{ property.property_description }}</v-card-text>
//             <v-btn @click="goToEstimateForm(property.propertyid)">Submit Estimate</v-btn>
//             <v-btn @click="initiateChat(property.propertyid)">Chat</v-btn>
//           </v-card>
//         </v-col>
//       </v-row>
//     </div>
//   </div>
// </template>

// <script setup>
// import { onMounted, computed } from 'vue';
// import { useStore } from 'vuex';
// import { useRouter } from 'vue-router';

// const store = useStore();
// const router = useRouter();

// const fetchContProperties = async () => {
//   await store.dispatch('fetchContProperties');
// };

// onMounted(fetchContProperties);

// const properties = computed(() => store.state.contractor.property);

// const goToEstimateForm = (propertyid) => {
//   router.push({
//     name: 'estimateForm',
//     params: { propertyid }
//   });
// };

// const initiateChat = async (propertyid) => {
//   try {
//     const response = await fetch(`/api/property/${propertyid}/owner`);
//     const owner = await response.json();
//     router.push({
//       name: 'ContractorChat',
//       params: { propertyid, ownerid: owner.userid }
//     });
//   } catch (error) {
//     console.error('Error fetching property owner:', error);
//   }
// };
// </script>

// <style scoped>
// /* Add your custom styles here */
// </style>
// ```

// #### 2. Contractor Chat Component (`ContractorChat.vue`)

// Implement the chat interface.

// ```vue
// <template>
//   <div>
//     <h1>Chat with {{ owner.username }}</h1>
//     <div v-if="messages.length === 0">No messages yet</div>
//     <div v-else>
//       <div v-for="message in messages" :key="message.message_id" :class="{'message-sender': message.sender_id === contractorid, 'message-receiver': message.receiver_id === contractorid}">
//         {{ message.message }}
//       </div>
//     </div>
//     <textarea v-model="newMessage" placeholder="Type your message..."></textarea>
//     <button @click="sendMessage">Send</button>
//   </div>
// </template>

// <script setup>
// import { onMounted, ref } from 'vue';
// import { useStore } from 'vuex';
// import { useRouter } from 'vue-router';

// const store = useStore();
// const router = useRouter();

// const contractorid = store.state.user.userid;
// const propertyid = router.currentRoute.value.params.propertyid;
// const ownerid = router.currentRoute.value.params.ownerid;
// const owner = ref({});
// const messages = ref([]);
// const newMessage = ref('');

// onMounted(() => {
//   fetchOwnerData();
//   fetchMessages();
// });

// const fetchOwnerData = async () => {
//   try {
//     const response = await fetch(`/api/property/${propertyid}/owner`);
//     owner.value = await response.json();
//   } catch (error) {
//     console.error('Error fetching property owner:', error);
//   }
// };

// const fetchMessages = async () => {
//   try {
//     const response = await fetch(`/api/chat/${propertyid}/messages`);
//     messages.value = await response.json();
//   } catch (error) {
//     console.error('Error fetching messages:', error);
//   }
// };

// const sendMessage = async () => {
//   try {
//     await fetch('/api/chat/message', {
//       method: 'POST',
//       headers: {
//         'Content-Type': 'application/json'
//       },
//       body: JSON.stringify({ sender_id: contractorid, receiver_id: ownerid, message: newMessage.value })
//     });
//     newMessage.value = '';
//     fetchMessages();
//   } catch (error) {
//     console.error('Error sending message:', error);
//   }
// };
// </script>

// <style scoped>
// .message-sender {
//   text-align: right;
//   background-color: #cfe2f3;
//   margin-right: 10px;
//   padding: 5px;
// }

// .message-receiver {
//   text-align: left;
//   background-color: #f0f0f0;
//   margin-left: 10px;
//   padding: 5px;
// }
// </style>
// ```

// ### Explanation

// 1. **Backend**:
//    - **`/api/property/:propertyid/owner`**: Fetches the property owner's information based on `propertyid`.
//    - **`/api/chat/:propertyid/messages`**: Fetches chat messages between the contractor and the property owner.
//    - **`/api/chat/message`**: Sends chat messages from the contractor to the property owner and vice versa.

// 2. **Frontend**:
//    - **`ContractorList.vue`**: Displays properties and includes a "Chat" button. When the "Chat" button is clicked, it fetches the property owner's details and navigates to the `ContractorChat` component, passing `propertyid` and `ownerid` as route parameters.
//    - **`ContractorChat.vue`**: Displays the chat interface with the property owner. Fetches messages between the contractor and the property owner and allows sending new messages.

// This way, the contractor can chat with the property owner, and the correct property owner is identified based on the property ID.


