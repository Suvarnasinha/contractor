//const estimate = result[0]?.estimate || 0;
//npm install @stripe/stripe-js





To integrate the payment functionality using Stripe into your Vue.js and Node.js application, we'll cover the backend, frontend, and SQL setup step-by-step. We'll also include a payment button in the chat interface as requested. Let's proceed with the detailed implementation.

Backend (Node.js with Express)
1. Install Required Packages
Make sure you have express, body-parser, cors, stripe, and mysql2 installed. If not, install them using npm:

bash
Copy code
npm install express body-parser cors stripe mysql2
2. Setup Stripe
Replace 'your_stripe_secret_key' with your actual Stripe secret key.

javascript
Copy code
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const stripe = require('stripe')('your_stripe_secret_key');
const mysql = require('mysql2/promise');

const app = express();
const port = 3000;

app.use(cors());
app.use(bodyParser.json());

// MySQL Connection Pool
const pool = mysql.createPool({
  host: 'localhost',
  user: 'your_mysql_username',
  password: 'your_mysql_password',
  database: 'property_contractor',
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0
});

// Fetch estimate endpoint
app.post('/fetch-estimate', async (req, res) => {
  const { propertyid, contractorid } = req.body;

  try {
    // Example query to fetch estimate from the database
    const [rows] = await pool.execute('SELECT estimate FROM contractorwork WHERE propertyid = ? AND contractorid = ?', [propertyid, contractorid]);
    const estimate = rows.length > 0 ? rows[0].estimate : 0; // Assuming the estimate is stored in the contractorwork table

    res.json({ estimate });
  } catch (error) {
    console.error('Error fetching estimate:', error);
    res.status(500).json({ error: 'Failed to fetch estimate' });
  }
});

// Finalize estimate and initiate payment endpoint
app.post('/finalize-estimate', async (req, res) => {
  const { propertyid, contractorid } = req.body;

  try {
    // Fetch estimate from the database
    const [rows] = await pool.execute('SELECT estimate FROM contractorwork WHERE propertyid = ? AND contractorid = ?', [propertyid, contractorid]);
    const estimate = rows.length > 0 ? rows[0].estimate : 0; // Assuming the estimate is stored in the contractorwork table

    // Create payment intent with Stripe
    const paymentIntent = await stripe.paymentIntents.create({
      amount: estimate * 100, // Stripe accepts amount in cents
      currency: 'usd',
      description: `Payment for property estimate ${propertyid}`,
    });

    res.json({ clientSecret: paymentIntent.client_secret });
  } catch (error) {
    console.error('Error creating payment intent:', error);
    res.status(500).json({ error: 'Failed to create payment intent' });
  }
});

// Start the server
app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});
Frontend (Vue.js)
1. Install Required Packages
Ensure you have vue-router and socket.io-client installed:

bash
Copy code
npm install vue-router socket.io-client
2. Payment Integration in Chat Interface
Modify your chat interface component (Chat.vue) to include a payment button that redirects to the payment page:

vue
Copy code
<template>
  <div class="chat-container">
    <h1 class="chat-header">Chat with {{ owner.name }}</h1>
    <div class="chat-messages">
      <!-- Messages display logic -->
    </div>
    <div class="chat-input">
      <!-- Message input logic -->
      <textarea v-model="newMessage" placeholder="Type your message..." class="input-textarea"></textarea>
      <button @click="sendMessage" class="send-button">Send</button>
      <router-link :to="{ path: '/pay-now', query: { propertyid, contractorid } }">
        <button class="pay-now-button">Pay Now</button>
      </router-link>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue';
import { useRouter, useRoute } from 'vue-router';
import { io } from 'socket.io-client';

const router = useRouter();
const route = useRoute();
const propertyid = route.query.propertyid;
const contractorid = route.query.contractorid;

const owner = ref({});
const newMessage = ref('');
const socket = io('http://localhost:3000');

onMounted(() => {
  fetchOwnerData();
  // Initialize socket.io logic
});

const fetchOwnerData = async () => {
  try {
    const response = await fetch(`http://localhost:3000/contractor/${contractorid}`);
    owner.value = await response.json();
  } catch (error) {
    console.error('Error fetching property owner:', error);
  }
};

const sendMessage = async () => {
  // Send message logic
};

const messageClass = (message) => ({
  // Message class logic
});
</script>

<style scoped>
/* Chat styles */
</style>
3. Payment Page (PayNow.vue)
Create a new component for handling the payment process:

vue
Copy code
<template>
  <div class="payment-container">
    <h2>Pay Now</h2>
    <p>Property ID: {{ propertyid }}</p>
    <p>Estimate: ${{ estimate }}</p>
    <button @click="payNow" class="pay-button">Confirm Payment</button>
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue';
import { useRouter, useRoute } from 'vue-router';

const router = useRouter();
const route = useRoute();
const propertyid = route.query.propertyid;
const contractorid = route.query.contractorid;
const estimate = ref(0);

onMounted(async () => {
  await fetchEstimate();
});

const fetchEstimate = async () => {
  try {
    const response = await fetch('http://localhost:3000/fetch-estimate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ propertyid, contractorid })
    });
    const data = await response.json();
    estimate.value = data.estimate;
  } catch (error) {
    console.error('Error fetching estimate:', error);
  }
};

const payNow = async () => {
  try {
    const response = await fetch('http://localhost:3000/finalize-estimate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ propertyid, contractorid })
    });
    const data = await response.json();
    const clientSecret = data.clientSecret;

    // Call Stripe to confirm the payment
    const { error } = await stripe.confirmCardPayment(clientSecret, {
      payment_method: {
        card: cardElement, // Replace with your Stripe card element
        billing_details: {
          name: owner.name, // Replace with actual contractor name
          email: owner.email, // Replace with actual contractor email
          estimate: estimate.value // Include estimate in billing details
        }
      }
    });

    if (error) {
      console.error('Payment failed:', error);
      // Handle payment failure
    } else {
      console.log('Payment successful!');
      // Handle payment success
    }
  } catch (error) {
    console.error('Error initiating payment:', error);
  }
};

</script>

<style scoped>
.payment-container {
  padding: 20px;
  background-color: #f9f9f9;
  color: #333;
}

.pay-button {
  background-color: #3b81fb;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
}

.pay-button:hover {
  background-color: #3f6ea1;
}
</style>
SQL Schema
Here is the updated SQL schema with the payment table:

sql
Copy code
CREATE TABLE `property_contractor`.`payment` (
  `paymentid` INT NOT NULL AUTO_INCREMENT,
  `propertyid` INT NOT NULL,
  `contractorid` INT NOT NULL,
  `amount` DECIMAL(10, 2) NOT NULL,
  `status` ENUM('pending', 'completed', 'failed') NOT NULL DEFAULT 'pending',
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`paymentid`),
  FOREIGN KEY (`propertyid`) REFERENCES `property`(`propertyid`),
  FOREIGN KEY (`contractorid`) REFERENCES `users`(`userid`)
);
This table will store payment information, including the property and contractor involved, amount, status, and creation timestamp.

Explanation
Backend: Node.js server using Express handles endpoints for fetching estimates and finalizing payments. It integrates with Stripe for secure payment processing and uses MySQL for data storage.

Frontend: Vue.js components include a chat interface (Chat.vue) with a payment button that redirects to a payment page (PayNow.vue). The payment page fetches the estimate from the backend, initializes the Stripe payment process, and confirms the payment.

SQL Schema: Includes a payment table to store payment details associated with properties and contractors.

Ensure to replace placeholders like Stripe secret key, MySQL credentials, and actual logic for fetching estimates and processing payments according to your application's requirements.

Let me know if you need further assistance or modifications!































To redirect the user to the Stripe payment page when clicking on the "Pay Now" button, you need to integrate Stripe's Checkout feature, which provides a hosted payment page for secure payment processing. Hereâ€™s how you can modify your Vue.js frontend to achieve this:

Frontend (Vue.js)
1. Install Required Packages
Make sure you have vue-router and stripe installed:

bash
Copy code
npm install vue-router stripe
2. Payment Integration in Chat Interface
Modify your payment page (PayNow.vue) to initiate the payment process using Stripe Checkout:

vue
Copy code
<template>
  <div class="payment-container">
    <h2>Pay Now</h2>
    <p>Property ID: {{ propertyid }}</p>
    <p>Estimate: ${{ estimate }}</p>
    <button @click="initiateStripeCheckout" class="pay-button">Pay Now</button>
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue';
import { useRouter, useRoute } from 'vue-router';
import { loadStripe } from '@stripe/stripe-js';

const router = useRouter();
const route = useRoute();
const propertyid = route.query.propertyid;
const contractorid = route.query.contractorid;
const estimate = ref(0);

onMounted(async () => {
  await fetchEstimate();
});

const fetchEstimate = async () => {
  try {
    const response = await fetch('http://localhost:3000/fetch-estimate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ propertyid, contractorid })
    });
    const data = await response.json();
    estimate.value = data.estimate;
  } catch (error) {
    console.error('Error fetching estimate:', error);
  }
};

const initiateStripeCheckout = async () => {
  try {
    const response = await fetch('http://localhost:3000/finalize-estimate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ propertyid, contractorid })
    });
    const data = await response.json();
    const clientSecret = data.clientSecret;

    // Load Stripe instance with your publishable key
    const stripe = await loadStripe('your_stripe_publishable_key');

    // Redirect to Stripe Checkout
    const { error } = await stripe.redirectToCheckout({
      sessionId: clientSecret
    });

    if (error) {
      console.error('Error redirecting to Checkout:', error);
      // Handle error
    }
  } catch (error) {
    console.error('Error initiating payment:', error);
  }
};
</script>

<style scoped>
.payment-container {
  padding: 20px;
  background-color: #f9f9f9;
  color: #333;
}

.pay-button {
  background-color: #3b81fb;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
}

.pay-button:hover {
  background-color: #3f6ea1;
}
</style>
Explanation
Frontend (Vue.js):
Stripe Checkout: We use loadStripe from @stripe/stripe-js to load Stripeâ€™s client-side JavaScript library with your publishable key. This library allows us to redirect the user to Stripe Checkout.
initiateStripeCheckout: This function initiates the payment process by fetching the client secret from your backend (finalize-estimate endpoint) and then redirecting the user to Stripe Checkout using redirectToCheckout method. The sessionId parameter is set to clientSecret, which Stripe uses to identify the payment session.
Additional Notes
Ensure you replace 'your_stripe_publishable_key' with your actual Stripe publishable key.
Stripe Checkout provides a secure and PCI-compliant way to handle payments without needing to handle sensitive card details on your server.
Make sure your backend (finalize-estimate endpoint) returns a valid clientSecret obtained from Stripeâ€™s paymentIntent creation for Checkout.
With these changes, clicking on the "Pay Now" button in your Vue.js frontend will redirect the user to the Stripe-hosted payment page for completing the payment securely. Adjust the styling and functionality as per your application's design and requirements.


